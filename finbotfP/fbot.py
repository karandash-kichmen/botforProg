import asyncio
import aiocron
import aiogram
import pymysql
import report_on_accounts

from datetime import date
from aiogram.dispatcher.fsm.state import StatesGroup, State
from aiogram import Router, types
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import user, password, host, db_name, port

from data_b_connect import admin_number, sql_—Åursor_request, config, sql_request_for_salary
from bot_keyboards import navigation_keyboards, operstions_keyboards
import warnings

warnings.filterwarnings("ignore", category=DeprecationWarning)
# –û–±'—î–∫—Ç –±–æ—Ç—É
bot = aiogram.Bot('TOKEN')
# –î–∏—Å–ø–µ—á–µ—Ä
dp = aiogram.Dispatcher()

router = Router()


# ### –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–ª–∏—à–∫—É –Ω–∞ –∫—ñ–Ω–µ—Ü—å –º—ñ—Å—è—Ü—è ###
# 1. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ª–∏—à–∫—É –Ω–∞ –∫—ñ–Ω–µ—Ü—å –º—ñ—Å—è—Ü—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è, -1
@aiocron.crontab('0 1 1 * *')
async def monthly_reminder_fo_sql():
    last_month_for_sql = str(date.today().month - 1)  # last month
    this_month_for_sql = str(date.today().month)  # this month
    this_year_for_sql = str(date.today().year)  # this month
    monthly_reminder_common = 0  # monthly reminder
    for i in range(len(operstions_keyboards.list_category_transaction)):
        category_for_sql_rem = operstions_keyboards.list_category_transaction[i]
        monthly_reminder_get = sql_—Åursor_request.sql_get_rem_mons_cats(category_for_sql_rem,
                                                                        last_month_for_sql,
                                                                        this_month_for_sql)
        # –ü–µ–Ω–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ –¥–æ–¥–∞–Ω–∏–π —Å—Ö–æ–∂–∏–π –∑–∞–ø–∏—Å.
        monthly_reminder = list(sql_—Åursor_request.sql_get_rem_per_last_month(category=category_for_sql_rem,
                                                                              last_month_for_sql=last_month_for_sql))
        if len(monthly_reminder) == 0:
            # 2. –ó–∞–ª–∏—à–æ–∫ –∑–∞–≥–∞–ª—å–Ω–∏–π –∑–∞ –º—ñ—Å—è—Ü—å + –ó–∞–ø–∏—Å –∑–∞–ª–∏—à–∫—É –≤ —Ç–∞–±–ª–∏—Ü—é
            if monthly_reminder_get is not None:
                monthly_reminder_common = monthly_reminder_common + monthly_reminder_get
                # 3. –ó–∞–ø–∏—Å –∑–∞–ª–∏—à–∫—É –≤ —Ç–∞–±–ª–∏—Ü—é
                sql_—Åursor_request.sql_add_rem_mons_cats(category=category_for_sql_rem,
                                                         last_month_for_sql=last_month_for_sql,
                                                         remainder=monthly_reminder_get)
        else:
            print('–ù–µ –Ω–∞–¥–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å')
        print('***********************************************')
    # 4. –ê—Ä—Ö—ñ–≤—É–≤–∞–Ω–Ω—è –≤—Å—ñ —Å—Ç–∞—Ä—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó. –ü–æ–∫–∏ —â–æ –Ω–µ –±–∞—á—É —Å–µ–Ω—Å—É –≤ –∞—Ä—Ö—ñ–≤—É–≤–∞–Ω–Ω—ñ


# –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ª–æ–≥—ñ–∫–∏ —Ä–æ–±–æ—Ç–∏ –∞—Ä—Ö—ñ–≤—É–≤–∞–Ω–Ω—è —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π

# –†–æ–±–æ—Ç–∞ –∑ –±—é–¥–∂–µ—Ç–æ–º
@dp.callback_query(text='budget_month_nav')
async def callback_category_nav_get_budget(callback: aiogram.types.CallbackQuery):
    list_of_budgets = list(sql_—Åursor_request.sql_get_budget_month())
    builder_menu_keyboard_in_category = InlineKeyboardBuilder()
    try:
        builder_menu_keyboard_in_category = InlineKeyboardBuilder()
        for i in range(len(list_of_budgets)):
            print(list_of_budgets[i])
            print(list_of_budgets[i][1])
            print(list_of_budgets[i][2])
            builder_menu_keyboard_in_category.row(
                types.InlineKeyboardButton(text=f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {list_of_budgets[i][3]},  "
                                                f"–ë—é–¥–∂–µ—Ç: {list_of_budgets[i][2]},  ",
                                           callback_data=f'{list_of_budgets[i][0]}'
                                                         f'_{list_of_budgets[i][1]}'))
    except Exception as ex:
        print('NoneType object is not iterable')
        print(ex)
    builder_menu_keyboard_in_category.row(types.InlineKeyboardButton(text=f"–î–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π",
                                                                     callback_data=f'menu_nav'))
    # builder_menu_keyboard_in_category.add(types.InlineKeyboardButton(text=f"‚Üí",
    #                                                                  callback_data=f'next_'
    #                                                                                f'{last_id_for_next_req}_'
    #                                                                                f'{ressss}'))
    # await bot.send_message(callback.message.from_user.id, "–í–∏–π–¥–∏ –∑–≤—ñ–¥—Å–∏ —Ä–æ–∑–±—ñ–π–Ω–∏–∫!")
    sum_of_budgets = sql_—Åursor_request.sql_get_sum_budget_month()[0]
    await bot.send_message(text=f"–ó–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç –≤–∏—Ç—Ä–∞—Ç: {sum_of_budgets}",
                           chat_id=callback.from_user.id,
                           reply_markup=builder_menu_keyboard_in_category.as_markup())

    await callback.answer()


@dp.callback_query(lambda txt: txt.data.startswith('next_'))
async def callback_cashbox_nav_next(callback: aiogram.types.CallbackQuery):
    category_for_sql_req_f = callback.data.split('_')[2]

    builder_menu_keyboard_in_category = InlineKeyboardBuilder()
    remainder_money = (int(list(sql_—Åursor_request.sql_get_balance_money_incategory(category_for_sql_req_f))[0]))

    id_callback_f = str(int(callback.data.split('_')[1]) - 1)
    id_for_next_step_to = str(int(callback.data.split('_')[1]) - 5)
    sql_next_5_orders = list(sql_—Åursor_request.sql_get_next_5_orders(category_for_sql_req_f,
                                                                      id_for_next_step=id_for_next_step_to,
                                                                      id_for_next_step_to=id_callback_f)
                             )
    last_id_for_next_req = sql_next_5_orders[0][0]
    for i in range(len(sql_next_5_orders)):
        last_id_for_next_req = sql_next_5_orders[i][0]
        builder_menu_keyboard_in_category.row(types.InlineKeyboardButton(text=f"–°—É–º–∞: {sql_next_5_orders[i][1]},  "
                                                                              f"–ö–æ–º–µ–Ω—Ç: {sql_next_5_orders[i][2]},  "
                                                                              f"–î–∞—Ç–∞: {sql_next_5_orders[i][4]}",
                                                                         callback_data=f'id_tr_{sql_next_5_orders[i][0]}'
                                                                                       f'_{category_for_sql_req_f}'))
    builder_menu_keyboard_in_category.row(types.InlineKeyboardButton
                                          (text=f"‚Üê", callback_data=f'past_'
                                                                    f'{last_id_for_next_req}_'
                                                                    f'{category_for_sql_req_f}'))
    builder_menu_keyboard_in_category.add(types.InlineKeyboardButton
                                          (text=f"–î–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data=f'menu_nav'))
    builder_menu_keyboard_in_category.add(types.InlineKeyboardButton
                                          (text=f"‚Üí", callback_data=f'next_'
                                                                    f'{last_id_for_next_req}_'
                                                                    f'{category_for_sql_req_f}'))

    await bot.edit_message_text(text=f"–ö–æ—à—Ç–∏ üí∞ \n"
                                     f"–ë–∞–ª–∞–Ω—Å: {remainder_money} \n"
                                     f"–ë—é–¥–∂–µ—Ç: ",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=builder_menu_keyboard_in_category.as_markup())

    await callback.answer()


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É –≤ –±–æ—Ç–∞, –∑ –∑–∞–ø–∏—Ç–æ–º –Ω–æ–º–µ—Ä—É
@dp.message(commands=["start"])
async def message_handler_start(message: aiogram.types.Message):
    await bot.send_message(message.from_user.id, "–¢–∏ —Ö—Ç–æ?",
                           reply_markup=navigation_keyboards.get_number_keyboard)


# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤—ñ–Ω –Ω–æ–º–µ—Ä—É –∑ –±–¥
# –ü–æ—Ç—Ä—ñ–±–Ω–æ —â–µ –∑—Ä–æ–±–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –¥–ª—è –• –∞–¥–º—ñ–Ω—ñ–≤
@dp.message(content_types=aiogram.types.ContentType.CONTACT)
async def message_handler_admin_phone(message: aiogram.types.Message):
    # –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä—É –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –≤–∏–≥–ª—è–¥—É
    phone_number_user = '+380' + str(message.contact.phone_number)[-9:]
    adm_phone = list(admin_number.get_admin_number())
    if phone_number_user in adm_phone[0][0]:
        await bot.send_message(message.from_user.id, "–ü—Ä–∏–≤—ñ—Ç üëã –±—Ä–æ! –ü–æ—ó—Ö–∞–ª–∏",
                               reply_markup=navigation_keyboards.start_menu_keyboard)
    else:
        await bot.send_message(message.from_user.id, "–í–∏–π–¥–∏ –∑–≤—ñ–¥—Å–∏ —Ä–æ–∑–±—ñ–π–Ω–∏–∫!")


# –ú–µ–Ω—é –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –±–æ—Ç–∞
# –ö–æ–ª–±–µ–∫–∏ –¥–ª—è –º–µ–Ω—é, —Ç–∞–∫ —è–∫ –±–æ—Ç –ø—Ä–∞—Ü—é—î –∑ —ñ–Ω–ª–∞–π–Ω –∫–æ–ø–∫–∞–º–∏
@dp.callback_query(text='menu_nav')
async def callback_menu_nav(callback: aiogram.types.CallbackQuery):
    await bot.edit_message_text(text='–ö—É–¥–∏ –ø—ñ–¥–µ–º–æ?',
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=navigation_keyboards.main_menu_keyboard)
    await callback.answer()


# –ó–≤—ñ—Ç –ø–æ –∑–∞–ª–∏—à–∫–∞—Ö
@dp.callback_query(text='report_on_accounts_nav')
async def callback_menu_nav(callback: aiogram.types.CallbackQuery):
    await bot.edit_message_text(text=report_on_accounts.report_on_acc_func(),
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                parse_mode='HTML',
                                reply_markup=navigation_keyboards.main_menu_keyboard)
    await callback.answer()


# –°—Ç–∞—Ä—Ç–æ–≤–µ –º–µ–Ω—é –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –±–æ—Ç–∞

@dp.callback_query(text='start_menu_nav')
async def callback_start_menu_nav(callback: aiogram.types.CallbackQuery):
    await bot.edit_message_text(text="üòé",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=navigation_keyboards.start_menu_keyboard)
    await callback.answer()


# –ö–æ–ª–±–µ–∫ –¥–ª—è –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ–π. –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
@dp.callback_query(lambda txt: txt.data in navigation_keyboards.list_category_transaction_nav)
async def callback_category_nav_get_transact(callback: aiogram.types.CallbackQuery):
    last_id_for_next_req = ''
    remainder_money = ''
    sql_last_5_orders = []

    category_for_sql_req_f = callback.data.split('_nav')[0]
    print(category_for_sql_req_f)
    builder_menu_keyboard_in_category = InlineKeyboardBuilder()
    try:
        remainder_money = (int(list(sql_—Åursor_request.sql_get_balance_money_incategory(category_for_sql_req_f))[0]))
    except Exception as ex:
        print(f'–ù–∞ –±–∞–ª–∞–Ω—Å—ñ: {category_for_sql_req_f} –≥—Ä–æ—à–µ–π –Ω–µ–º–∞!')
        print(ex)
    try:
        sql_last_5_orders = list(sql_—Åursor_request.sql_get_last_5_orders(category_for_sql_req_f))
        last_id_for_next_req = sql_last_5_orders[0][0]
    except Exception as ex:
        print(f'–í –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: {category_for_sql_req_f} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –Ω–µ–º–∞!')
        print(ex)

    try:
        builder_menu_keyboard_in_category = InlineKeyboardBuilder()
        for i in range(len(sql_last_5_orders)):
            builder_menu_keyboard_in_category.row(types.InlineKeyboardButton(text=f"–°—É–º–∞: {sql_last_5_orders[i][1]},  "
                                                                                  f"–ö–æ–º–µ–Ω—Ç: {sql_last_5_orders[i][2]},  "
                                                                                  f"–î–∞—Ç–∞: {sql_last_5_orders[i][4]}",
                                                                             callback_data=f'id_tr_'
                                                                                           f'{sql_last_5_orders[i][0]}'
                                                                                           f'_{category_for_sql_req_f}'))
            last_id_for_next_req = sql_last_5_orders[i][0]
    except Exception as ex:
        print('NoneType object is not iterable')
        print(ex)
    builder_menu_keyboard_in_category.row(types.InlineKeyboardButton(text=f"–î–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π",
                                                                     callback_data=f'menu_nav'))
    builder_menu_keyboard_in_category.add(types.InlineKeyboardButton(text=f"‚Üí",
                                                                     callback_data=f'next_'
                                                                                   f'{last_id_for_next_req}_'
                                                                                   f'{category_for_sql_req_f}'))
    await bot.edit_message_text(text=f"–ó–∞–ª–∏—à–æ–∫: {remainder_money}",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=builder_menu_keyboard_in_category.as_markup())

    await callback.answer()


@dp.callback_query(lambda txt: txt.data.startswith('next_'))
async def callback_cashbox_nav_next(callback: aiogram.types.CallbackQuery):
    category_for_sql_req_f = callback.data.split('_')[2]

    builder_menu_keyboard_in_category = InlineKeyboardBuilder()
    remainder_money = (int(list(sql_—Åursor_request.sql_get_balance_money_incategory(category_for_sql_req_f))[0]))

    id_callback_f = str(int(callback.data.split('_')[1]) - 1)
    id_for_next_step_to = str(int(callback.data.split('_')[1]) - 5)
    sql_next_5_orders = list(sql_—Åursor_request.sql_get_next_5_orders(category_for_sql_req_f,
                                                                      id_for_next_step=id_for_next_step_to,
                                                                      id_for_next_step_to=id_callback_f)
                             )
    last_id_for_next_req = sql_next_5_orders[0][0]
    for i in range(len(sql_next_5_orders)):
        last_id_for_next_req = sql_next_5_orders[i][0]
        builder_menu_keyboard_in_category.row(types.InlineKeyboardButton(text=f"–°—É–º–∞: {sql_next_5_orders[i][1]},  "
                                                                              f"–ö–æ–º–µ–Ω—Ç: {sql_next_5_orders[i][2]},  "
                                                                              f"–î–∞—Ç–∞: {sql_next_5_orders[i][4]}",
                                                                         callback_data=f'id_tr_{sql_next_5_orders[i][0]}'
                                                                                       f'_{category_for_sql_req_f}'))
    builder_menu_keyboard_in_category.row(types.InlineKeyboardButton
                                          (text=f"‚Üê", callback_data=f'past_'
                                                                    f'{last_id_for_next_req}_'
                                                                    f'{category_for_sql_req_f}'))
    builder_menu_keyboard_in_category.add(types.InlineKeyboardButton
                                          (text=f"–î–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data=f'menu_nav'))
    builder_menu_keyboard_in_category.add(types.InlineKeyboardButton
                                          (text=f"‚Üí", callback_data=f'next_'
                                                                    f'{last_id_for_next_req}_'
                                                                    f'{category_for_sql_req_f}'))

    await bot.edit_message_text(text=f"–ó–∞–ª–∏—à–æ–∫: {remainder_money}",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=builder_menu_keyboard_in_category.as_markup())

    await callback.answer()


@dp.callback_query(lambda txt: txt.data.startswith('past_'))
async def callback_cashbox_nav_next(callback: aiogram.types.CallbackQuery):
    category_for_sql_req_f = callback.data.split('_')[2]

    builder_menu_keyboard_in_category = InlineKeyboardBuilder()
    remainder_money = (int(list(sql_—Åursor_request.sql_get_balance_money_incategory(category_for_sql_req_f))[0]))

    id_callback_f = str(int(callback.data.split('_')[1]) + 4)
    id_for_past_step_to = str(int(callback.data.split('_')[1]) + 9)
    sql_past_5_orders = list(sql_—Åursor_request.sql_get_past_5_orders(category_for_sql_req_f,
                                                                      id_for_past_step=id_callback_f,
                                                                      id_for_past_step_to=id_for_past_step_to)
                             )
    last_id_for_next_req = sql_past_5_orders[0][0]
    for i in range(len(sql_past_5_orders)):
        last_id_for_next_req = sql_past_5_orders[i][0]
        builder_menu_keyboard_in_category.row(types.InlineKeyboardButton(text=f"–°—É–º–∞: {sql_past_5_orders[i][1]},  "
                                                                              f"–ö–æ–º–µ–Ω—Ç: {sql_past_5_orders[i][2]},  "
                                                                              f"–î–∞—Ç–∞: {sql_past_5_orders[i][4]}",
                                                                         callback_data=f'id_tr_{sql_past_5_orders[i][0]}'
                                                                                       f'_{category_for_sql_req_f}'))
    builder_menu_keyboard_in_category.row(types.InlineKeyboardButton
                                          (text=f"‚Üê", callback_data=f'past_'
                                                                    f'{last_id_for_next_req}_'
                                                                    f'{category_for_sql_req_f}'))
    builder_menu_keyboard_in_category.add(types.InlineKeyboardButton
                                          (text=f"–î–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data=f'menu_nav'))
    builder_menu_keyboard_in_category.add(types.InlineKeyboardButton
                                          (text=f"‚Üí", callback_data=f'next_'
                                                                    f'{last_id_for_next_req}_'
                                                                    f'{category_for_sql_req_f}'))

    await bot.edit_message_text(text=f"–ó–∞–ª–∏—à–æ–∫: {remainder_money}",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=builder_menu_keyboard_in_category.as_markup())

    await callback.answer()


# ######################################################################################################################

# –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó

@dp.callback_query(lambda txt: txt.data.startswith('id_tr_'))
async def get_transaction_info_in_cats(callback: aiogram.types.CallbackQuery):
    print(callback.data)
    builder_menu_keyboard_in_category = InlineKeyboardBuilder()
    id_of_transaction_for_delet = callback.data.split('_')[2]
    category = callback.data.split('_')[3]
    sql_response_get_transaction = sql_—Åursor_request.sql_get_transaction_info_in_cats(category,
                                                                                       id_of_transaction_for_delet)
    print(sql_response_get_transaction)
    id_transaction = sql_response_get_transaction[0]
    funds = sql_response_get_transaction[1]
    comment_transaction = sql_response_get_transaction[2]
    order_comment_transaction = sql_response_get_transaction[3]
    transfer_transaction = sql_response_get_transaction[4]
    operation_date_transaction = sql_response_get_transaction[5]
    type_transaction = sql_response_get_transaction[7]
    archived = sql_response_get_transaction[8]
    deleted = sql_response_get_transaction[9]
    done_in_crm = sql_response_get_transaction[10]
    remainder = sql_response_get_transaction[11]

    text_for_transc_info = f'''
–Ø–∫—â–æ –≤ –ø—É–Ω–∫—Ç—ñ —î <b>?</b>, —Ç–æ:

<b>'0' = –ù–Ü, '1' = –¢–ê–ö</b>

–ù–æ–º–µ—Ä –≤ –ë–î : {id_transaction}
–°—É–º–∞ :       {funds}
–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ–π:  {comment_transaction}
–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è:  {order_comment_transaction}
–î–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {operation_date_transaction}
–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:  {type_transaction}
–ü–µ—Ä–µ–∫–∞–∑?:    {transfer_transaction} 
–ê—Ä—Ö—ñ–≤–æ–≤–∞–Ω–æ?: {archived}
–í–∏–¥–∞–ª–µ–Ω–æ?:   {deleted}
–ü—Ä–æ–≤–µ–¥–µ–Ω–æ –≤ –¶–†–ú?: {done_in_crm}
–ó–∞–ª–∏—à–æ–∫: {remainder}'''
    builder_menu_keyboard_in_category.row(types.InlineKeyboardButton
                                          (text=f"–í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f'de_l_{id_transaction}_{category}'))
    builder_menu_keyboard_in_category.add(types.InlineKeyboardButton
                                          (text=f"–ê—Ä—Ö—ñ–≤—É–≤–∞—Ç–∏", callback_data=f'archi_ved_{id_transaction}_{category}'))
    builder_menu_keyboard_in_category.row(types.InlineKeyboardButton
                                          (text=f"–ù–∞–∑–∞–¥", callback_data=f'{category}_nav'))
    await bot.edit_message_text(text=text_for_transc_info,
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                parse_mode='HTML',
                                reply_markup=builder_menu_keyboard_in_category.as_markup())
    await callback.answer()


# –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
@dp.callback_query(lambda txt: txt.data.startswith('de_l_'))
async def delete_transaction_in_cats(callback: aiogram.types.CallbackQuery):
    id_of_transaction_for_delet = callback.data.split('_')[2]
    category = callback.data.split('_')[3]
    sql_—Åursor_request.sql_delete_transaction_from_category(category, id_of_transaction_for_delet)
    # –¥–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ
    id_of_tr = int(id_of_transaction_for_delet)

    try:
        connection = pymysql.connect(
            host=host,
            port=port,
            user=user,
            password=password,
            database=db_name
        )
        try:
            with connection.cursor() as cursor:
                try:
                    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–ª–∏—à–∫—É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
                    result_remainder_money = 0  # –í–≤–æ–¥–∏–º–æ –∑–º—ñ–Ω–Ω—É –∑–∞–ª–∏—à–∫—É –∫–æ—à—Ç
                    while result_remainder_money == 0:
                        try:
                            id_of_tr -= 1
                            if id_of_tr <= 0:  # –Ø–∫—â–æ –≤—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –±—É–¥—É—Ç—å –≤–∏–¥–∞–ª–µ–Ω—ñ, —Ç–æ –º–∏ –¥–æ–±–µ—Ä–µ–º–æ—Å—å –¥–æ
                                # 0—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—Ö —ñ –ø—ñ–¥—Å—Ç–∞–≤–∏–º–æ 0. –∑–∞–≤–µ—Ä—à–∏–º–æ –≤–∞–π–ª
                                result_remainder_money = 0
                                break
                            else:
                                # –ô–¥–µ–º–æ —Ü–∏–∫–ª–æ–º, –ø–æ–∫–∏ –Ω–µ –∑—É—Å—Ç—Ä—ñ–Ω–µ–º–æ 1–π –Ω–µ –≤–∏–¥–∞–ª–µ–Ω–∏–π. –¢–∞ –≤—ñ–∑—å–º–µ–º–æ –∑ –Ω—å–æ–≥–æ –∑–∞–ª–∏—à–æ–∫
                                insert_query = f"SELECT remainder FROM {category} " \
                                               f"WHERE {category}.`deleted` = 0 AND {category}.`id` = {id_of_tr};"
                                cursor.execute(insert_query)
                                result_remainder_money = cursor.fetchall()[0][0]  # –ó–∞–ø–∏—Å –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–ª–∏—à–∫—É –≤ –∑–º—ñ–Ω–Ω—É
                        except Exception as ex:
                            print(ex)
                except Exception as ex:
                    print(ex)

                # –ó–∞–ø–∏—Å—É—î–º–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–µ –≤–∏–∑–∏–≤–∞—î–º–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è, –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é —â–æ –≤–∏–¥–∞–ª—è—î–º–æ
                # –∑–∞–ª–∏—à–æ–∫ –ø–æ–ø–µ—Ä–µ–¥—Ç–æ—ó —Ç—Ä–∞–Ω–∑–∞—Ü—ñ—ó, –∞–±–æ 0
                insert_query_1 = f"UPDATE {category} SET `remainder` = '{result_remainder_money}' " \
                                 f"WHERE {category}.`id` = {id_of_transaction_for_delet};"
                cursor.execute(insert_query_1)
                connection.commit()

                # –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ –≤—Å—ñ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó !!!! –ù–µ–æ–±—Ö–æ–¥–Ω–æ –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –∫–æ–¥, —Ç–∞ –¥–æ–ø–∏—Å–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É,
                # —â–æ –± –ø—Ä–æ–ø—É—Å–∫–∞–ª–æ –≤–∏–¥–∞–ª–µ–Ω—ñ –∑–∞–ø–∏—Å–∏
                x = 0
                while True:
                    x += 1
                    id_of_tr_1 = int(id_of_transaction_for_delet) + x
                    insert_query_2 = f"SELECT deleted FROM {category} WHERE {category}.`id` = {id_of_tr_1};"
                    cursor.execute(insert_query_2)
                    result_deleted_transac = int(cursor.fetchone()[0])
                    if result_deleted_transac == 0:
                        insert_query_2 = f"SELECT funds FROM {category} WHERE {category}.`id` = {id_of_tr_1};"
                        cursor.execute(insert_query_2)
                        result_funds_money = int(cursor.fetchone()[0])

                        id_of_tr_2 = id_of_tr_1 - 1
                        insert_query_2 = f"SELECT remainder FROM {category} WHERE {category}.`id` = {id_of_tr_2};"
                        cursor.execute(insert_query_2)
                        result_remainder_money_1 = int(cursor.fetchone()[0])

                        result_remainder_money_f = result_funds_money + result_remainder_money_1
                        insert_query_3 = f"UPDATE {category} SET `remainder` = '{result_remainder_money_f}' " \
                                         f"WHERE {category}.`id` = {id_of_tr_1};"
                        cursor.execute(insert_query_3)
                        connection.commit()

                    else:
                        insert_query_2 = f"SELECT funds FROM {category} WHERE {category}.`id` = {id_of_tr_1};"
                        cursor.execute(insert_query_2)
                        result_funds_money = int(cursor.fetchone()[0])

                        id_of_tr_22 = id_of_tr_1 - 1
                        insert_query_22 = f"SELECT remainder FROM {category} WHERE {category}.`id` = {id_of_tr_22};"
                        cursor.execute(insert_query_22)
                        result_remainder_money_1 = int(cursor.fetchone()[0])

                        insert_query_3 = f"UPDATE {category} SET `remainder` = '{result_remainder_money}' " \
                                         f"WHERE {category}.`id` = {id_of_tr_1};"
                        cursor.execute(insert_query_3)
                        connection.commit()
        finally:
            connection.close()
    except Exception as ex:
        print('Connection error...')
        print(ex)

    await bot.edit_message_text(text='<b>–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ!</b>',
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                parse_mode='HTML',
                                reply_markup=navigation_keyboards.main_menu_keyboard)
    await callback.answer()


# –ê—Ä—Ö—ñ–≤—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
@dp.callback_query(lambda txt: txt.data.startswith('archi_ved_'))
async def delete_transaction_in_cats(callback: aiogram.types.CallbackQuery):
    id_of_transaction_for_delet = callback.data.split('_')[2]
    category = callback.data.split('_')[3]
    sql_—Åursor_request.sql_archived_transaction_from_category(category, id_of_transaction_for_delet)
    await bot.edit_message_text(text='<b>–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –∞—Ä—Ö—ñ–≤–æ–≤–∞–Ω–æ!</b>',
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                parse_mode='HTML',
                                reply_markup=navigation_keyboards.main_menu_keyboard)
    await callback.answer()


# ######################################################################################################################
# –ö–æ–ª–±–µ–∫ –¥–ª—è "–ö–æ—à—Ç–∏ üí∞"
@dp.callback_query(text='funds_nav')
async def callback_funds_nav(callback: aiogram.types.CallbackQuery):
    await bot.edit_message_text(text='–û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: ',
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=navigation_keyboards.money_menu_keyboard)
    await callback.answer()


#######################################################################################################################

# –ö–æ–ª–±–µ–∫ –¥–ª—è "–ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∏ üöö"
@dp.callback_query(text='suppliers_nav')
async def callback_suppliers_nav(callback: aiogram.types.CallbackQuery):
    await bot.edit_message_text(text='–û–±–µ—Ä–∏ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞: ',
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=navigation_keyboards.suppliers_menu_keyboard)
    await callback.answer()


#######################################################################################################################

# –ö–æ–ª–±–µ–∫ –¥–ª—è "–í–∏—Ç—Ä–∞—Ç–∏ ‚ûñ"
@dp.callback_query(text='spending_nav')
async def callback_spending_nav(callback: aiogram.types.CallbackQuery):
    await bot.edit_message_text(text='–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –≤–∏—Ç—Ä–∞—Ç?',
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=navigation_keyboards.spending_menu_keyboard)
    await callback.answer()


#######################################################################################################################

# –ö–æ–ª–±–µ–∫ –¥–ª—è "–ó–ü/–î–∏–≤—ñ–¥–µ–Ω–¥–∏ ü§ë"

@dp.callback_query(text='dividends_nav')
async def callback_dividends_nav(callback: aiogram.types.CallbackQuery):
    await bot.edit_message_text(text='–®–æ –ø–æ –ó–ü?üí≤',
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=navigation_keyboards.menu_dividends_keyboard)
    await callback.answer()


#######################################################################################################################

# –ö–æ–ª–±–µ–∫ –¥–ª—è "–ó–ü –û—Ñ—ñ—Å üè¢"

@dp.callback_query(text='dividends_office_nav')
async def callback_dividends_office_nav(callback: aiogram.types.CallbackQuery):
    await bot.edit_message_text(text='–®–æ –ø–æ –ó–ü –≤ –æ—Ñ—ñ—Å—ñ?üí≤',
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=operstions_keyboards.menu_dividends_keyboard_office)
    await callback.answer()


#######################################################################################################################

# –ö–æ–ª–±–µ–∫ –¥–ª—è "–ó–ü –°–¢–û üè¢"

@dp.callback_query(text='dividends_sto_nav')
async def callback_dividends_sto_nav(callback: aiogram.types.CallbackQuery):
    await bot.edit_message_text(text='–®–æ –ø–æ –ó–ü –ù–∞ –°–¢–û?üí≤',
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=operstions_keyboards.menu_dividends_keyboard_sto)
    await callback.answer()


# –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –∫–∞—Ä—Ç–∫—É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ —Å—Ç–æ
@dp.callback_query(lambda txt: txt.data.endswith("_salarysto"))
async def callback_category_nav_get_transact(callback: aiogram.types.CallbackQuery):
    id_person = callback.data.split('_')[1]
    remindermoney = sql_—Åursor_request.sql_get_rem_divident_bud(personid=id_person, category='salarysto')
    name = remindermoney[0]
    money_remind = remindermoney[1]
    category_salary = 'salarysto'
    menu_buttons_in_salary = [
        [types.InlineKeyboardButton(text="–ó–∞—Ä–∞—Ö—É–≤–∞—Ç–∏", callback_data=f'{id_person}_{category_salary}_to_count')],
        [types.InlineKeyboardButton(text="–°–ø–∏—Å–∞—Ç–∏", callback_data='write_off')],
        [types.InlineKeyboardButton(text="–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó", callback_data='transactions_by_employee')],
        [types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data='menu_nav')]
    ]
    menu_keyboard_in_salary = types.InlineKeyboardMarkup(inline_keyboard=menu_buttons_in_salary)

    await bot.edit_message_text(text=f"{name}\n–ó–∞–ª–∏—à–æ–∫:{money_remind}",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=menu_keyboard_in_salary)
    await callback.answer()


# –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –∫–∞—Ä—Ç–∫—É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ –æ—Ñ—ñ—Å—É
@dp.callback_query(lambda txt: txt.data.endswith("_salary"))
async def callback_category_nav_get_transact(callback: aiogram.types.CallbackQuery):
    id_person = callback.data.split('_')[1]
    remindermoney = sql_—Åursor_request.sql_get_rem_divident_bud(personid=id_person, category='salaryoffise')
    name = remindermoney[0]
    money_remind = remindermoney[1]
    category_salary = 'salaryoffise'
    menu_buttons_in_salary = [
        [types.InlineKeyboardButton(text="–ó–∞—Ä–∞—Ö—É–≤–∞—Ç–∏", callback_data=f'{id_person}_{category_salary}_to_count')],
        [types.InlineKeyboardButton(text="–°–ø–∏—Å–∞—Ç–∏", callback_data=f'{id_person}_{category_salary}_write_off')],
        [types.InlineKeyboardButton(text="–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó", callback_data='transactions_by_employee')],
        [types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data='menu_nav')]
    ]
    menu_keyboard_in_salary = types.InlineKeyboardMarkup(inline_keyboard=menu_buttons_in_salary)

    await bot.edit_message_text(text=f"{name}\n–ó–∞–ª–∏—à–æ–∫: {money_remind}",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=menu_keyboard_in_salary)
    await callback.answer()


class SalaryInformation(StatesGroup):
    salary_income = State()
    salary_write_off = State()


# –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è –ó–ü

@dp.callback_query(lambda txt: txt.data.endswith("_to_count"))
async def callback_to_count_zp(callback: aiogram.types.CallbackQuery, state: FSMContext):
    await state.update_data(idperson=callback.data.split('_')[0])
    await state.update_data(category_salary=callback.data.split('_')[1])
    await bot.edit_message_text(text=f"–í–≤–µ–¥—ñ—Ç—å –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è:",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id)
    await state.set_state(SalaryInformation.salary_income)
    await callback.answer()


@dp.message(state=SalaryInformation.salary_income)
async def state_to_count_zp(message: aiogram.types.Message, state: FSMContext):
    await state.update_data(to_count=message.text)
    to_count_info = await state.get_data()
    idperson = to_count_info['idperson']
    category_salary = to_count_info['category_salary']
    to_count = to_count_info['to_count']
    reminder = sql_request_for_salary.last_remind_salary_personid(category=category_salary, personid=idperson)[0]
    all_info_person = sql_request_for_salary.last_info_salary_personid(category=category_salary, personid=idperson)
    name_person = all_info_person[1]
    surname_person = all_info_person[2]
    phone_person = all_info_person[3]
    type_tansaction = "1"
    reminder = reminder + int(to_count)
    sql_request_for_salary.sql_add_salary(category=category_salary, personid=idperson, reminder=reminder,
                                          to_count=to_count, name=name_person, surname=surname_person,
                                          phone=phone_person, type_tansaction=type_tansaction)
    await bot.send_message(message.from_user.id, f"–ó–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ {to_count} –≥—Ä–Ω. \n–î–ª—è {surname_person} {name_person}",
                           reply_markup=navigation_keyboards.menu_dividends_keyboard)
    await state.clear()


# –°–ø–∏—Å–∞–Ω–Ω—è –ó–ü

@dp.callback_query(lambda txt: txt.data.endswith("_write_off"))
async def callback_to_count_zp(callback: aiogram.types.CallbackQuery, state: FSMContext):
    await state.update_data(idperson=callback.data.split('_')[0])
    await state.update_data(category_salary=callback.data.split('_')[1])
    await bot.edit_message_text(text=f"–í–≤–µ–¥—ñ—Ç—å –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è:",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id)
    await state.set_state(SalaryInformation.salary_write_off)
    await callback.answer()


@dp.message(state=SalaryInformation.salary_write_off)
async def state_to_count_zp(message: aiogram.types.Message, state: FSMContext):
    await state.update_data(to_count=message.text)
    to_count_info = await state.get_data()
    idperson = to_count_info['idperson']
    category_salary = to_count_info['category_salary']
    to_count = to_count_info['to_count']
    reminder = sql_request_for_salary.last_remind_salary_personid(category=category_salary, personid=idperson)[0]
    all_info_person = sql_request_for_salary.last_info_salary_personid(category=category_salary, personid=idperson)
    name_person = all_info_person[1]
    surname_person = all_info_person[2]
    phone_person = all_info_person[3]
    type_tansaction = "2"
    reminder = reminder - int(to_count)
    sql_request_for_salary.sql_add_salary(category=category_salary, personid=idperson, reminder=reminder,
                                          to_count=to_count, name=name_person, surname=surname_person,
                                          phone=phone_person, type_tansaction=type_tansaction)
    await bot.send_message(message.from_user.id, f"–°–ø–∏—Å–∞–Ω–æ {to_count} –≥—Ä–Ω. \n–î–ª—è {surname_person} {name_person}",
                           reply_markup=navigation_keyboards.menu_dividends_keyboard)
    await state.clear()


# –ë–ª–æ–∫ –≤–Ω–µ—Å–µ–Ω–Ω—è –¥–∞–Ω–Ω–∏—Ö –¥–æ –ë–î –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é FCM —Ç–∞ callback. –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω–Ω—ñ –≤ FCM –ø–æ—Ç—ñ–º —Ñ–æ—Ä–º—É—î–º–æ –ø–∞–∫–µ—Ç –¥–ª—è –ë–î

# –ö–ª–∞—Å –¥–ª—è –∑–±–æ—Ä—É –¥–∞–Ω–Ω–∏—Ö –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞
class TransactionInformation(StatesGroup):
    funds_income = State()
    comment_income = State()
    order_income = State()
    category_transaction_income = State()

    funds_outlay = State()
    comment_outlay = State()
    order_outlay = State()
    category_transaction_outlay = State()

    funds_transfer = State()
    comment_transfer = State()
    order_transfer = State()
    category_transaction_transfer_from = State()
    category_transaction_transfer_to = State()
    transaction_transfer_entr = State()


# #######################      –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –∫–Ω–æ–ø–∫–∞ "–ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è‚ûï"    ######################################### #

# –ó–∞–ø–∏—Ç –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏
@dp.callback_query(text='add_income_nav')
async def callback_add_income_nav(callback: aiogram.types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(text="–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É:",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id)
    await state.set_state(TransactionInformation.funds_income)
    await callback.answer()


# –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –∫–æ—à—Ç, —Ç–∞ –∑–∞–ø–∏—Ç –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç—É
@dp.message(state=TransactionInformation.funds_income)
async def message_entr_comment_income(message: aiogram.types.Message, state: FSMContext):
    try:
        type(int(message.text))
        if int(message.text) > 0:
            await state.update_data(funds=message.text)
            await bot.send_message(message.from_user.id, text="–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–µ–Ω—Ç:")
            await state.set_state(TransactionInformation.comment_income)
        else:
            await state.update_data(funds=int(message.text) * -1)
            await bot.send_message(message.from_user.id, text="–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–µ–Ω—Ç:")
            await state.set_state(TransactionInformation.comment_income)
    except:
        await bot.send_message(message.from_user.id, text="–¶—ñ–ª–µ —á–∏—Å–ª–æ...:")
        await state.set_state(TransactionInformation.funds_income)


# –ó–∞–ø–∏—Ç –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø–æ –∑–∞–º–æ–≤–ª–µ–Ω—é

@dp.message(state=TransactionInformation.comment_income)
async def message_entr_order_income(message: aiogram.types.Message, state: FSMContext):
    await state.update_data(comment=message.text)
    await bot.send_message(message.from_user.id, text="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è?")
    await state.set_state(TransactionInformation.order_income)


# –í–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó

@dp.message(state=TransactionInformation.order_income)
async def message_entr_category_income(message: aiogram.types.Message, state: FSMContext):
    await state.update_data(order=message.text)
    await bot.send_message(message.from_user.id,
                           text="–ö–∞—Ç–µ–≥–æ—Ä—ñ—è?",
                           reply_markup=operstions_keyboards.main_menu_keyboard)
    await state.set_state(TransactionInformation.order_income)


# –í–∏–±—ñ—Ä –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ö–æ—à—Ç–∏ üí∞"

@dp.callback_query(text='funds', state=TransactionInformation.order_income)
async def callback_add_income_nav_funds(callback: aiogram.types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(text="–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è?:",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=operstions_keyboards.money_menu_keyboard)
    await state.set_state(TransactionInformation.category_transaction_income)
    await callback.answer()


# –í–∏–±—ñ—Ä –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∏ üöö"
@dp.callback_query(text='suppliers', state=TransactionInformation.order_income)
async def callback_add_income_nav_suppliers(callback: aiogram.types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(text="–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è?:",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=operstions_keyboards.suppliers_menu_keyboard)
    await state.set_state(TransactionInformation.category_transaction_income)
    await callback.answer()


# –í–∏–±—ñ—Ä –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–í–∏—Ç—Ä–∞—Ç–∏ ‚ûñ"
@dp.callback_query(text='spending', state=TransactionInformation.order_income)
async def callback_add_income_nav_spending(callback: aiogram.types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(text="–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è?:",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=operstions_keyboards.spending_menu_keyboard)
    await state.set_state(TransactionInformation.category_transaction_income)
    await callback.answer()


# –í–∏–±—ñ—Ä –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ó–ü/–î–∏–≤—ñ–¥–µ–Ω–¥–∏ ü§ë"
@dp.callback_query(text='dividends', state=TransactionInformation.order_income)
async def callback_add_income_nav_dividends(callback: aiogram.types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(text="–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è?:",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=operstions_keyboards.menu_dividends_keyboard)
    await state.set_state(TransactionInformation.category_transaction_income)
    await callback.answer()


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω–∏—Ö –≤ –±–¥, —á–µ—Ä–µ–∑ –∑–æ–≤–Ω—ñ—à–Ω—é —Ñ-—Ü—ñ—é
@dp.callback_query(text=operstions_keyboards.list_category_transaction,
                   state=TransactionInformation.category_transaction_income)
async def callback_add_income_sql(callback: aiogram.types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    try:
        remainder_money_sql = sql_—Åursor_request.res_remainder_money(callback.data) + int(user_data['funds'])
    except:
        remainder_money_sql = 0
    sql_—Åursor_request.funds_SQL_add(funds=int(user_data['funds']),
                                     comment=user_data['comment'],
                                     order=user_data['order'],
                                     funds_category=callback.data,
                                     remainder=remainder_money_sql)
    await bot.send_message(callback.message.chat.id, text=f"–°—É–º–∞: {user_data['funds']}\n"
                                                          f"–ö–æ–º–µ–Ω—Ç: {user_data['comment']}\n"
                                                          f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: {user_data['order']}\n"
                                                          f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {callback.data}",
                           reply_markup=navigation_keyboards.start_menu_keyboard)
    await callback.answer()
    await state.clear()


# #######################      –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –∫–Ω–æ–ø–∫–∞ "–í–∏—Ç—Ä–∞—Ç–∞ ‚ûñ"    #############################################

# –ó–∞–ø–∏—Ç –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏
@dp.callback_query(text='add_spending_nav')
async def callback_add_spending_nav(callback: aiogram.types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(text="–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É:",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id)
    await state.set_state(TransactionInformation.funds_outlay)
    await callback.answer()


# –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –∫–æ—à—Ç, —Ç–∞ –∑–∞–ø–∏—Ç –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç—É
@dp.message(state=TransactionInformation.funds_outlay)
async def message_await_spending_comment(message: aiogram.types.Message, state: FSMContext):
    try:
        type(int(message.text))
        if int(message.text) < 0:
            await state.update_data(funds=message.text)
            await bot.send_message(message.from_user.id, text="–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–µ–Ω—Ç:")
            await state.set_state(TransactionInformation.comment_outlay)
        else:
            await state.update_data(funds=int(message.text) * -1)
            await bot.send_message(message.from_user.id, text="–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–µ–Ω—Ç:")
            await state.set_state(TransactionInformation.comment_outlay)
    except:
        await bot.send_message(message.from_user.id, text="–¶—ñ–ª–µ —á–∏—Å–ª–æ...:")
        await state.set_state(TransactionInformation.funds_outlay)


# –ó–∞–ø–∏—Ç –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø–æ –∑–∞–º–æ–≤–ª–µ–Ω—é

@dp.message(state=TransactionInformation.comment_outlay)
async def message_await_spending_order(message: aiogram.types.Message, state: FSMContext):
    await state.update_data(comment=message.text)
    await bot.send_message(message.from_user.id, text="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è?")
    await state.set_state(TransactionInformation.order_outlay)


# –í–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó

@dp.message(state=TransactionInformation.order_outlay)
async def message_await_spending_category(message: aiogram.types.Message, state: FSMContext):
    await state.update_data(order=message.text)
    await bot.send_message(message.from_user.id,
                           text="–ö–∞—Ç–µ–≥–æ—Ä—ñ—è?",
                           reply_markup=operstions_keyboards.main_menu_keyboard)
    await state.set_state(TransactionInformation.order_outlay)


# –í–∏–±—ñ—Ä –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ö–æ—à—Ç–∏ üí∞"

@dp.callback_query(text='funds', state=TransactionInformation.order_outlay)
async def callback_add_spending_nav_funds(callback: aiogram.types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(text="–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è?:",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=operstions_keyboards.money_menu_keyboard)
    await state.set_state(TransactionInformation.category_transaction_outlay)
    await callback.answer()


# –í–∏–±—ñ—Ä –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∏ üöö"
@dp.callback_query(text='suppliers', state=TransactionInformation.order_outlay)
async def callback_add_spending_nav_suppliers(callback: aiogram.types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(text="–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è?:",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=operstions_keyboards.suppliers_menu_keyboard)
    await state.set_state(TransactionInformation.category_transaction_outlay)
    await callback.answer()


# –í–∏–±—ñ—Ä –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–í–∏—Ç—Ä–∞—Ç–∏ ‚ûñ"
@dp.callback_query(text='spending', state=TransactionInformation.order_outlay)
async def callback_add_spending_nav_spending(callback: aiogram.types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(text="–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è?:",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=operstions_keyboards.spending_menu_keyboard)
    await state.set_state(TransactionInformation.category_transaction_outlay)
    await callback.answer()


# –í–∏–±—ñ—Ä –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ó–ü/–î–∏–≤—ñ–¥–µ–Ω–¥–∏ ü§ë"
@dp.callback_query(text='dividends', state=TransactionInformation.order_outlay)
async def callback_add_spending_nav_dividends(callback: aiogram.types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(text="–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è?:",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=operstions_keyboards.menu_dividends_keyboard)
    await state.set_state(TransactionInformation.category_transaction_outlay)
    await callback.answer()


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω–∏—Ö –≤ –±–¥, —á–µ—Ä–µ–∑ –∑–æ–≤–Ω—ñ—à–Ω—é —Ñ-—Ü—ñ—é
@dp.callback_query(text=operstions_keyboards.list_category_transaction,
                   state=TransactionInformation.category_transaction_outlay)
async def callback_add_spending_sql(callback: aiogram.types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    print(callback.data)
    try:
        remainder_money_sql = sql_—Åursor_request.res_remainder_money(callback.data) + int(user_data['funds'])
    except:
        remainder_money_sql = 0
    sql_—Åursor_request.funds_SQL_add(funds=int(user_data['funds']),
                                     comment=user_data['comment'],
                                     order=user_data['order'],
                                     funds_category=callback.data,
                                     remainder=remainder_money_sql, type_transaction=2)
    await bot.send_message(callback.message.chat.id, text=f"–°—É–º–∞: {user_data['funds']}\n"
                                                          f"–ö–æ–º–µ–Ω—Ç: {user_data['comment']}\n"
                                                          f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: {user_data['order']}\n"
                                                          f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {callback.data}",
                           reply_markup=navigation_keyboards.start_menu_keyboard)
    await state.clear()
    await callback.answer()


# #######################      –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –∫–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–∫–∞–∑ üîÑ"    ############################################ #

# –ó–∞–ø–∏—Ç –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ –ø–µ—Ä–µ–∫–∞–∑—É
@dp.callback_query(text='money_transfer_nav')
async def callback_money_transfer_nav(callback: aiogram.types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(text="–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É:",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id)
    await state.set_state(TransactionInformation.funds_transfer)
    await callback.answer()


# –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –∫–æ—à—Ç, —Ç–∞ –∑–∞–ø–∏—Ç –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç—É
@dp.message(state=TransactionInformation.funds_transfer)
async def message_await_entr_comment_transfer(message: aiogram.types.Message, state: FSMContext):
    try:  # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ int
        type(int(message.text))
        if int(message.text) > 0:  # –Ø–∫—â–æ —á–∏—Å–ª–æ  > 0 —Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∞ –π–¥–µ–º–æ –¥–∞–ª—ñ
            await state.update_data(funds_transfer=message.text)  # –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è —Å—É–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
            await bot.send_message(message.from_user.id, text="–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–µ–Ω—Ç:")
            await state.set_state(TransactionInformation.comment_transfer)
        else:  # –í —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É –º—ñ–Ω—è—î–º–æ –∑–Ω–∞–∫
            await state.update_data(funds_transfer=int(message.text) * -1)
            await bot.send_message(message.from_user.id, text="–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–µ–Ω—Ç:")
            await state.set_state(TransactionInformation.comment_transfer)
    except:  # –ö–ª—ñ—î–Ω—Ç –≤–≤—ñ–≤ –Ω–µ —Ü—ñ–ª–µ —á–∏—Å–ª–æ, —â–µ –æ–¥–∏–Ω –∑–∞–ø–∏—Ç –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —Ü—ñ–ª–æ–≥–æ —á–∏—Å–ª–∞
        await bot.send_message(message.from_user.id, text="–¶—ñ–ª–µ —á–∏—Å–ª–æ...:")
        await state.set_state(TransactionInformation.funds_transfer)


# –ó–∞–ø–∏—Ç –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø–æ –∑–∞–º–æ–≤–ª–µ–Ω—é

@dp.message(state=TransactionInformation.comment_transfer)
async def message_await_entr_order_transfer(message: aiogram.types.Message, state: FSMContext):
    await state.update_data(comment_transfer=message.text)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–º–µ–Ω—Ç
    await bot.send_message(message.from_user.id, text="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è?")  # –ó–∞–ø–∏—Ç –ø–æ–ª—è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è
    await state.set_state(TransactionInformation.order_transfer)


# –í–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ —è–∫–æ—ó –±—É–¥–µ–º–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–∏

@dp.message(state=TransactionInformation.order_transfer)
async def message_await_entr_category_from(message: aiogram.types.Message, state: FSMContext):
    await state.update_data(order=message.text)
    await bot.send_message(message.from_user.id,
                           text="–ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó?",
                           reply_markup=operstions_keyboards.main_menu_keyboard)
    await state.set_state(TransactionInformation.category_transaction_transfer_from)


# –í–∏–±—ñ—Ä –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ö–æ—à—Ç–∏ üí∞"

@dp.callback_query(text='funds', state=TransactionInformation.category_transaction_transfer_from)
async def callback_await_funds_category_from(callback: aiogram.types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(text="–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è?:",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=operstions_keyboards.money_menu_keyboard)
    await state.set_state(TransactionInformation.category_transaction_transfer_to)
    await callback.answer()


# –í–∏–±—ñ—Ä –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∏ üöö"
@dp.callback_query(text='suppliers', state=TransactionInformation.category_transaction_transfer_from)
async def callback_await_suppliers_category_from(callback: aiogram.types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(text="–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è?:",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=operstions_keyboards.suppliers_menu_keyboard)
    await state.set_state(TransactionInformation.category_transaction_transfer_to)
    await callback.answer()


# –í–∏–±—ñ—Ä –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–í–∏—Ç—Ä–∞—Ç–∏ ‚ûñ"
@dp.callback_query(text='spending', state=TransactionInformation.category_transaction_transfer_from)
async def callback_await_spending_category_from(callback: aiogram.types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(text="–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è?:",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=operstions_keyboards.spending_menu_keyboard)
    await state.set_state(TransactionInformation.category_transaction_transfer_to)
    await callback.answer()


# –í–∏–±—ñ—Ä –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ó–ü/–î–∏–≤—ñ–¥–µ–Ω–¥–∏ ü§ë"
@dp.callback_query(text='dividends', state=TransactionInformation.category_transaction_transfer_from)
async def callback_await_dividends_category_from(callback: aiogram.types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(text="–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è?:",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=operstions_keyboards.menu_dividends_keyboard)
    await state.set_state(TransactionInformation.category_transaction_transfer_to)
    await callback.answer()


# –í–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤ —è–∫—É –±—É–¥–µ–º–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–∏

@dp.callback_query(text=operstions_keyboards.list_category_transaction,
                   state=TransactionInformation.category_transaction_transfer_to)
async def callback_await_entr_category_to(callback: aiogram.types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(text="–í —è–∫—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é?:",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=operstions_keyboards.main_menu_keyboard)
    await state.update_data(category_transaction_transfer_from=callback.data)
    await state.set_state(TransactionInformation.category_transaction_transfer_to)
    await callback.answer()


# –í–∏–±—ñ—Ä –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ö–æ—à—Ç–∏ üí∞"

@dp.callback_query(text='funds', state=TransactionInformation.category_transaction_transfer_to)
async def callback_await_funds_category_to(callback: aiogram.types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(text="–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è?:",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=operstions_keyboards.money_menu_keyboard)
    await state.set_state(TransactionInformation.transaction_transfer_entr)
    await callback.answer()


# –í–∏–±—ñ—Ä –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∏ üöö"

@dp.callback_query(text='suppliers', state=TransactionInformation.category_transaction_transfer_to)
async def callback_await_suppliers_category_to(callback: aiogram.types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(text="–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è?:",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=operstions_keyboards.suppliers_menu_keyboard)
    await state.set_state(TransactionInformation.transaction_transfer_entr)
    await callback.answer()


# –í–∏–±—ñ—Ä –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–í–∏—Ç—Ä–∞—Ç–∏ ‚ûñ"

@dp.callback_query(text='spending', state=TransactionInformation.category_transaction_transfer_to)
async def callback_await_spending_category_to(callback: aiogram.types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(text="–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è?:",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=operstions_keyboards.spending_menu_keyboard)
    await state.set_state(TransactionInformation.transaction_transfer_entr)
    await callback.answer()


# –í–∏–±—ñ—Ä –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ó–ü/–î–∏–≤—ñ–¥–µ–Ω–¥–∏ ü§ë"

@dp.callback_query(text='dividends', state=TransactionInformation.category_transaction_transfer_to)
async def callback_await_dividends_category_to(callback: aiogram.types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(text="–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è?:",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=operstions_keyboards.menu_dividends_keyboard)
    await state.set_state(TransactionInformation.transaction_transfer_entr)
    await callback.answer()


# –í–∏–±—ñ—Ä –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ó–ü –û—Ñ—ñ—Å üè¢"

@dp.callback_query(text='dividends_office', state=TransactionInformation.category_transaction_transfer_to)
async def callback_await_dividends_category_to(callback: aiogram.types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(text="–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è?: ",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=operstions_keyboards.menu_dividends_keyboard)
    await state.set_state(TransactionInformation.transaction_transfer_entr)
    await callback.answer()


# –í–∏–±—ñ—Ä –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ó–ü –°–¢–û üõ†"

@dp.callback_query(text='dividends_sto', state=TransactionInformation.category_transaction_transfer_to)
async def callback_await_dividends_category_to(callback: aiogram.types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(text="–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è?:",
                                chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=operstions_keyboards.menu_dividends_keyboard)
    await state.set_state(TransactionInformation.transaction_transfer_entr)
    await callback.answer()


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω–∏—Ö –≤ –±–¥, —á–µ—Ä–µ–∑ –∑–æ–≤–Ω—ñ—à–Ω—é —Ñ-—Ü—ñ—é. –ü—Ä–∏–Ω—Ü–∏–ø–æ–º –≤ 1 —Ç–∞–±–ª–∏—Ü—ñ - –≤ —ñ–Ω—à—ñ–π +
@dp.callback_query(text=operstions_keyboards.list_category_transaction_to,
                   state=TransactionInformation.transaction_transfer_entr)
async def callback_add_transfer_sql(callback: aiogram.types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    print(user_data)
    # —Ç—É—Ç –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –∑—Ä–æ–±–∏—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, –∑—Ä–æ–±–∏—Ç–∏ —Ç—Ä–∞–π —ñ —Ç–ø.
    # —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –≤—ñ–¥'—î–º–Ω—É —Ç—Ä–∞–∑–Ω–∞–∫—Ü—ñ—é –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –ó"
    remainder_money_sql = sql_—Åursor_request.res_remainder_money(user_data['category_transaction_transfer_from']) - int(
        user_data['funds_transfer'])
    funds_for_sql_rs_request_to = int(user_data['funds_transfer']) * -1
    sql_—Åursor_request.funds_SQL_add(funds=funds_for_sql_rs_request_to,
                                     comment=user_data['comment_transfer'],
                                     order=user_data['order'],
                                     funds_category=user_data['category_transaction_transfer_from'],
                                     remainder=remainder_money_sql, type_transaction=3)

    # —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –ø–ª—é—Å–æ–≤—É —Ç—Ä–∞–∑–Ω–∞–∫—Ü—ñ—é –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –í"
    remainder_money_sql = sql_—Åursor_request.res_remainder_money(callback.data) + int(user_data['funds_transfer'])
    sql_—Åursor_request.funds_SQL_add(funds=int(user_data['funds_transfer']),
                                     comment=user_data['comment_transfer'],
                                     order=user_data['order'],
                                     funds_category=callback.data,
                                     remainder=remainder_money_sql, type_transaction=3)

    await bot.send_message(callback.message.chat.id, text=f"–°—É–º–∞: {user_data['funds_transfer']}\n"
                                                          f"–ö–æ–º–µ–Ω—Ç: {user_data['comment_transfer']}\n"
                                                          f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: {user_data['order']}\n"
                                                          f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –ó —è–∫–æ—ó: "
                                                          f"{user_data['category_transaction_transfer_from']}\n"
                                                          f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –í —è–∫—É: {callback.data}",
                           reply_markup=navigation_keyboards.start_menu_keyboard)
    await callback.answer()
    await state.clear()


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
